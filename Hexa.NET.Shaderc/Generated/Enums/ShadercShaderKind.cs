// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;

namespace Hexa.NET.Shaderc
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[Flags]
	public enum ShadercShaderKind : int
	{
		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		VertexShader = unchecked(0),

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		FragmentShader = unchecked(1),

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		ComputeShader = unchecked(2),

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		GeometryShader = unchecked(3),

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		TessControlShader = unchecked(4),

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		TessEvaluationShader = unchecked(5),

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		GlslVertexShader = VertexShader,

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		GlslFragmentShader = FragmentShader,

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		GlslComputeShader = ComputeShader,

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		GlslGeometryShader = GeometryShader,

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		GlslTessControlShader = TessControlShader,

		/// <summary>
		/// Forced shader kinds. These shader kinds force the compiler to compile the<br/>
		/// source code as the specified kind of shader.<br/>
		/// </summary>
		GlslTessEvaluationShader = TessEvaluationShader,

		/// <summary>
		/// Deduce the shader kind from #pragma annotation in the source code. Compiler<br/>
		/// will emit error if #pragma annotation is not found.<br/>
		/// </summary>
		GlslInferFromSource = unchecked(6),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultVertexShader = unchecked(7),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultFragmentShader = unchecked(8),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultComputeShader = unchecked(9),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultGeometryShader = unchecked(10),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultTessControlShader = unchecked(11),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultTessEvaluationShader = unchecked(12),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		SpirvAssembly = unchecked(13),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		RaygenShader = unchecked(14),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		AnyhitShader = unchecked(15),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		ClosesthitShader = unchecked(16),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		MissShader = unchecked(17),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		IntersectionShader = unchecked(18),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		CallableShader = unchecked(19),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslRaygenShader = RaygenShader,

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslAnyhitShader = AnyhitShader,

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslClosesthitShader = ClosesthitShader,

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslMissShader = MissShader,

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslIntersectionShader = IntersectionShader,

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslCallableShader = CallableShader,

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultRaygenShader = unchecked(20),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultAnyhitShader = unchecked(21),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultClosesthitShader = unchecked(22),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultMissShader = unchecked(23),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultIntersectionShader = unchecked(24),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultCallableShader = unchecked(25),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		TaskShader = unchecked(26),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		MeshShader = unchecked(27),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslTaskShader = TaskShader,

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslMeshShader = MeshShader,

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultTaskShader = unchecked(28),

		/// <summary>
		/// Default shader kinds. Compiler will fall back to compile the source code as<br/>
		/// the specified kind of shader when #pragma annotation is not found in the<br/>
		/// source code.<br/>
		/// </summary>
		GlslDefaultMeshShader = unchecked(29),
	}
}
