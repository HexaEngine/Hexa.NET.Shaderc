// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Shaderc
{
	public static unsafe partial class Extensions
	{
		/// <summary>
		/// Releases the resources held by the shaderc_compiler_t.<br/>
		/// After this call it is invalid to make any future calls to functions<br/>
		/// involving this shaderc_compiler_t.<br/>
		/// </summary>
		public static void Release(this ShadercCompiler unknown0)
		{
			Shaderc.CompilerReleaseNative(unknown0);
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = inputFileName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inputFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inputFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, sourceText, sourceTextSize, shaderKind, pStr0, entryPointName, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				fixed (byte* pinputFileName = inputFileName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inputFileName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inputFileName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, pStr0, sourceTextSize, shaderKind, pStr1, entryPointName, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = &entryPointName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = entryPointName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPointName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPointName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pStr0, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				fixed (byte* pentryPointName = entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (entryPointName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(entryPointName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, pStr1, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = inputFileName)
			{
				fixed (byte* pentryPointName = entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inputFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inputFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (entryPointName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(entryPointName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, sourceText, sourceTextSize, shaderKind, pStr0, pStr1, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					fixed (byte* pentryPointName = &entryPointName)
					{
						ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				fixed (byte* pinputFileName = inputFileName)
				{
					fixed (byte* pentryPointName = entryPointName)
					{
						ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file<br/>
		/// name, compiles it according to the given additional_options. If the shader<br/>
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,<br/>
		/// the compiler will try to deduce the shader kind from the source<br/>
		/// string and a failure in deducing will generate an error. Currently only<br/>
		/// #pragma annotation is supported. If the shader kind is set to one of the<br/>
		/// default shader kinds, the compiler will fall back to the default shader<br/>
		/// kind in case it failed to deduce the shader kind from source string.<br/>
		/// The input_file_name is a null-termintated string. It is used as a tag to<br/>
		/// identify the source string in cases like emitting error messages. It<br/>
		/// doesn't have to be a 'file name'.<br/>
		/// The source string will be compiled into SPIR-V binary and a<br/>
		/// shaderc_compilation_result will be returned to hold the results.<br/>
		/// The entry_point_name null-terminated string defines the name of the entry<br/>
		/// point to associate with this GLSL source. If the additional_options<br/>
		/// parameter is not null, then the compilation is modified by any options<br/>
		/// present.  May be safely called from multiple threads without explicit<br/>
		/// synchronization. If there was failure in allocating the compiler object,<br/>
		/// null will be returned.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpv(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inputFileName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inputFileName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (entryPointName != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(entryPointName, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvNative(compiler, pStr0, sourceTextSize, shaderKind, pStr1, pStr2, additionalOptions);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = inputFileName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inputFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inputFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, sourceText, sourceTextSize, shaderKind, pStr0, entryPointName, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				fixed (byte* pinputFileName = inputFileName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inputFileName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inputFileName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, pStr0, sourceTextSize, shaderKind, pStr1, entryPointName, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = &entryPointName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = entryPointName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPointName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPointName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pStr0, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				fixed (byte* pentryPointName = entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (entryPointName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(entryPointName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, pStr1, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = inputFileName)
			{
				fixed (byte* pentryPointName = entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inputFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inputFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (entryPointName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(entryPointName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, sourceText, sourceTextSize, shaderKind, pStr0, pStr1, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					fixed (byte* pentryPointName = &entryPointName)
					{
						ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				fixed (byte* pinputFileName = inputFileName)
				{
					fixed (byte* pentryPointName = entryPointName)
					{
						ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text<br/>
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined<br/>
		/// by the SPIRV-Tools open source project.<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoSpvAssembly(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inputFileName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inputFileName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (entryPointName != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(entryPointName, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoSpvAssemblyNative(compiler, pStr0, sourceTextSize, shaderKind, pStr1, pStr2, additionalOptions);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = inputFileName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inputFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inputFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, pStr0, entryPointName, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				fixed (byte* pinputFileName = inputFileName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inputFileName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inputFileName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, pStr1, entryPointName, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = &entryPointName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = entryPointName)
			{
				ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPointName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPointName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pStr0, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				fixed (byte* pentryPointName = entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (entryPointName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(entryPointName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, pStr1, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = inputFileName)
			{
				fixed (byte* pentryPointName = entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inputFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inputFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (entryPointName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(entryPointName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, pStr0, pStr1, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					fixed (byte* pentryPointName = &entryPointName)
					{
						ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ReadOnlySpan<byte> inputFileName, ReadOnlySpan<byte> entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = sourceText)
			{
				fixed (byte* pinputFileName = inputFileName)
				{
					fixed (byte* pentryPointName = entryPointName)
					{
						ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>
		/// code instead of a SPIR-V binary module<br/>
		/// </summary>
		public static ShadercCompilationResult CompileIntoPreprocessedText(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inputFileName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inputFileName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (entryPointName != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(entryPointName, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			ShadercCompilationResult ret = Shaderc.CompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, pStr1, pStr2, additionalOptions);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>
		/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>
		/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>
		/// returned to hold the results.<br/>
		/// The assembling will pick options suitable for assembling specified in the<br/>
		/// additional_options parameter.<br/>
		/// May be safely called from multiple threads without explicit synchronization.<br/>
		/// If there was failure in allocating the compiler object, null will be<br/>
		/// returned.<br/>
		/// </summary>
		public static ShadercCompilationResult AssembleIntoSpv(this ShadercCompiler compiler, byte* sourceAssembly, nuint sourceAssemblySize, ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = Shaderc.AssembleIntoSpvNative(compiler, sourceAssembly, sourceAssemblySize, additionalOptions);
			return ret;
		}

		/// <summary>
		/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>
		/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>
		/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>
		/// returned to hold the results.<br/>
		/// The assembling will pick options suitable for assembling specified in the<br/>
		/// additional_options parameter.<br/>
		/// May be safely called from multiple threads without explicit synchronization.<br/>
		/// If there was failure in allocating the compiler object, null will be<br/>
		/// returned.<br/>
		/// </summary>
		public static ShadercCompilationResult AssembleIntoSpv(this ShadercCompiler compiler, ref byte sourceAssembly, nuint sourceAssemblySize, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceAssembly = &sourceAssembly)
			{
				ShadercCompilationResult ret = Shaderc.AssembleIntoSpvNative(compiler, (byte*)psourceAssembly, sourceAssemblySize, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>
		/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>
		/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>
		/// returned to hold the results.<br/>
		/// The assembling will pick options suitable for assembling specified in the<br/>
		/// additional_options parameter.<br/>
		/// May be safely called from multiple threads without explicit synchronization.<br/>
		/// If there was failure in allocating the compiler object, null will be<br/>
		/// returned.<br/>
		/// </summary>
		public static ShadercCompilationResult AssembleIntoSpv(this ShadercCompiler compiler, ReadOnlySpan<byte> sourceAssembly, nuint sourceAssemblySize, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceAssembly = sourceAssembly)
			{
				ShadercCompilationResult ret = Shaderc.AssembleIntoSpvNative(compiler, (byte*)psourceAssembly, sourceAssemblySize, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>
		/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>
		/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>
		/// returned to hold the results.<br/>
		/// The assembling will pick options suitable for assembling specified in the<br/>
		/// additional_options parameter.<br/>
		/// May be safely called from multiple threads without explicit synchronization.<br/>
		/// If there was failure in allocating the compiler object, null will be<br/>
		/// returned.<br/>
		/// </summary>
		public static ShadercCompilationResult AssembleIntoSpv(this ShadercCompiler compiler, string sourceAssembly, nuint sourceAssemblySize, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceAssembly != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceAssembly);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceAssembly, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = Shaderc.AssembleIntoSpvNative(compiler, pStr0, sourceAssemblySize, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Returns a copy of the given shaderc_compile_options_t.<br/>
		/// If NULL is passed as the parameter the call is the same as<br/>
		/// shaderc_compile_options_init.<br/>
		/// </summary>
		public static ShadercCompileOptions Clone(this ShadercCompileOptions options)
		{
			ShadercCompileOptions ret = Shaderc.CompileOptionsCloneNative(options);
			return ret;
		}

		/// <summary>
		/// Releases the resources held by the shaderc_compiler_t.<br/>
		/// After this call it is invalid to make any future calls to functions<br/>
		/// involving this shaderc_compiler_t.<br/>
		/// </summary>
		public static void Release(this ShadercCompileOptions options)
		{
			Shaderc.CompileOptionsReleaseNative(options);
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same<br/>
		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>
		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>
		/// compiler. If a macro definition with the same name has previously been<br/>
		/// added, the value is replaced with the new value. The macro name and<br/>
		/// value are passed in with char pointers, which point to their data, and<br/>
		/// the lengths of their data. The strings that the name and value pointers<br/>
		/// point to must remain valid for the duration of the call, but can be<br/>
		/// modified or deleted after this function has returned. In case of adding<br/>
		/// a valueless macro, the value argument should be a null pointer or the<br/>
		/// value_length should be 0u.<br/>
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, byte* name, nuint nameLength, byte* value, nuint valueLength)
		{
			Shaderc.CompileOptionsAddMacroDefinitionNative(options, name, nameLength, value, valueLength);
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same<br/>
		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>
		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>
		/// compiler. If a macro definition with the same name has previously been<br/>
		/// added, the value is replaced with the new value. The macro name and<br/>
		/// value are passed in with char pointers, which point to their data, and<br/>
		/// the lengths of their data. The strings that the name and value pointers<br/>
		/// point to must remain valid for the duration of the call, but can be<br/>
		/// modified or deleted after this function has returned. In case of adding<br/>
		/// a valueless macro, the value argument should be a null pointer or the<br/>
		/// value_length should be 0u.<br/>
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, ref byte name, nuint nameLength, byte* value, nuint valueLength)
		{
			fixed (byte* pname = &name)
			{
				Shaderc.CompileOptionsAddMacroDefinitionNative(options, (byte*)pname, nameLength, value, valueLength);
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same<br/>
		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>
		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>
		/// compiler. If a macro definition with the same name has previously been<br/>
		/// added, the value is replaced with the new value. The macro name and<br/>
		/// value are passed in with char pointers, which point to their data, and<br/>
		/// the lengths of their data. The strings that the name and value pointers<br/>
		/// point to must remain valid for the duration of the call, but can be<br/>
		/// modified or deleted after this function has returned. In case of adding<br/>
		/// a valueless macro, the value argument should be a null pointer or the<br/>
		/// value_length should be 0u.<br/>
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, ReadOnlySpan<byte> name, nuint nameLength, byte* value, nuint valueLength)
		{
			fixed (byte* pname = name)
			{
				Shaderc.CompileOptionsAddMacroDefinitionNative(options, (byte*)pname, nameLength, value, valueLength);
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same<br/>
		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>
		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>
		/// compiler. If a macro definition with the same name has previously been<br/>
		/// added, the value is replaced with the new value. The macro name and<br/>
		/// value are passed in with char pointers, which point to their data, and<br/>
		/// the lengths of their data. The strings that the name and value pointers<br/>
		/// point to must remain valid for the duration of the call, but can be<br/>
		/// modified or deleted after this function has returned. In case of adding<br/>
		/// a valueless macro, the value argument should be a null pointer or the<br/>
		/// value_length should be 0u.<br/>
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, string name, nuint nameLength, byte* value, nuint valueLength)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.CompileOptionsAddMacroDefinitionNative(options, pStr0, nameLength, value, valueLength);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same<br/>
		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>
		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>
		/// compiler. If a macro definition with the same name has previously been<br/>
		/// added, the value is replaced with the new value. The macro name and<br/>
		/// value are passed in with char pointers, which point to their data, and<br/>
		/// the lengths of their data. The strings that the name and value pointers<br/>
		/// point to must remain valid for the duration of the call, but can be<br/>
		/// modified or deleted after this function has returned. In case of adding<br/>
		/// a valueless macro, the value argument should be a null pointer or the<br/>
		/// value_length should be 0u.<br/>
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, byte* name, nuint nameLength, ref byte value, nuint valueLength)
		{
			fixed (byte* pvalue = &value)
			{
				Shaderc.CompileOptionsAddMacroDefinitionNative(options, name, nameLength, (byte*)pvalue, valueLength);
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same<br/>
		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>
		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>
		/// compiler. If a macro definition with the same name has previously been<br/>
		/// added, the value is replaced with the new value. The macro name and<br/>
		/// value are passed in with char pointers, which point to their data, and<br/>
		/// the lengths of their data. The strings that the name and value pointers<br/>
		/// point to must remain valid for the duration of the call, but can be<br/>
		/// modified or deleted after this function has returned. In case of adding<br/>
		/// a valueless macro, the value argument should be a null pointer or the<br/>
		/// value_length should be 0u.<br/>
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, byte* name, nuint nameLength, ReadOnlySpan<byte> value, nuint valueLength)
		{
			fixed (byte* pvalue = value)
			{
				Shaderc.CompileOptionsAddMacroDefinitionNative(options, name, nameLength, (byte*)pvalue, valueLength);
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same<br/>
		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>
		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>
		/// compiler. If a macro definition with the same name has previously been<br/>
		/// added, the value is replaced with the new value. The macro name and<br/>
		/// value are passed in with char pointers, which point to their data, and<br/>
		/// the lengths of their data. The strings that the name and value pointers<br/>
		/// point to must remain valid for the duration of the call, but can be<br/>
		/// modified or deleted after this function has returned. In case of adding<br/>
		/// a valueless macro, the value argument should be a null pointer or the<br/>
		/// value_length should be 0u.<br/>
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, byte* name, nuint nameLength, string value, nuint valueLength)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (value != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(value);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(value, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.CompileOptionsAddMacroDefinitionNative(options, name, nameLength, pStr0, valueLength);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same<br/>
		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>
		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>
		/// compiler. If a macro definition with the same name has previously been<br/>
		/// added, the value is replaced with the new value. The macro name and<br/>
		/// value are passed in with char pointers, which point to their data, and<br/>
		/// the lengths of their data. The strings that the name and value pointers<br/>
		/// point to must remain valid for the duration of the call, but can be<br/>
		/// modified or deleted after this function has returned. In case of adding<br/>
		/// a valueless macro, the value argument should be a null pointer or the<br/>
		/// value_length should be 0u.<br/>
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, ref byte name, nuint nameLength, ref byte value, nuint valueLength)
		{
			fixed (byte* pname = &name)
			{
				fixed (byte* pvalue = &value)
				{
					Shaderc.CompileOptionsAddMacroDefinitionNative(options, (byte*)pname, nameLength, (byte*)pvalue, valueLength);
				}
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same<br/>
		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>
		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>
		/// compiler. If a macro definition with the same name has previously been<br/>
		/// added, the value is replaced with the new value. The macro name and<br/>
		/// value are passed in with char pointers, which point to their data, and<br/>
		/// the lengths of their data. The strings that the name and value pointers<br/>
		/// point to must remain valid for the duration of the call, but can be<br/>
		/// modified or deleted after this function has returned. In case of adding<br/>
		/// a valueless macro, the value argument should be a null pointer or the<br/>
		/// value_length should be 0u.<br/>
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, ReadOnlySpan<byte> name, nuint nameLength, ReadOnlySpan<byte> value, nuint valueLength)
		{
			fixed (byte* pname = name)
			{
				fixed (byte* pvalue = value)
				{
					Shaderc.CompileOptionsAddMacroDefinitionNative(options, (byte*)pname, nameLength, (byte*)pvalue, valueLength);
				}
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same<br/>
		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>
		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>
		/// compiler. If a macro definition with the same name has previously been<br/>
		/// added, the value is replaced with the new value. The macro name and<br/>
		/// value are passed in with char pointers, which point to their data, and<br/>
		/// the lengths of their data. The strings that the name and value pointers<br/>
		/// point to must remain valid for the duration of the call, but can be<br/>
		/// modified or deleted after this function has returned. In case of adding<br/>
		/// a valueless macro, the value argument should be a null pointer or the<br/>
		/// value_length should be 0u.<br/>
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, string name, nuint nameLength, string value, nuint valueLength)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (value != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(value);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(value, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.CompileOptionsAddMacroDefinitionNative(options, pStr0, nameLength, pStr1, valueLength);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Sets the source language.  The default is GLSL.<br/>
		/// </summary>
		public static void SetSourceLanguage(this ShadercCompileOptions options, ShadercSourceLanguage lang)
		{
			Shaderc.CompileOptionsSetSourceLanguageNative(options, lang);
		}

		/// <summary>
		/// Sets the compiler mode to generate debug information in the output.<br/>
		/// </summary>
		public static void SetGenerateDebugInfo(this ShadercCompileOptions options)
		{
			Shaderc.CompileOptionsSetGenerateDebugInfoNative(options);
		}

		/// <summary>
		/// Sets the compiler optimization level to the given level. Only the last one<br/>
		/// takes effect if multiple calls of this function exist.<br/>
		/// </summary>
		public static void SetOptimizationLevel(this ShadercCompileOptions options, ShadercOptimizationLevel level)
		{
			Shaderc.CompileOptionsSetOptimizationLevelNative(options, level);
		}

		/// <summary>
		/// Forces the GLSL language version and profile to a given pair. The version<br/>
		/// number is the same as would appear in the #version annotation in the source.<br/>
		/// Version and profile specified here overrides the #version annotation in the<br/>
		/// source. Use profile: 'shaderc_profile_none' for GLSL versions that do not<br/>
		/// define profiles, e.g. versions below 150.<br/>
		/// </summary>
		public static void SetForcedVersionProfile(this ShadercCompileOptions options, int version, ShadercProfile profile)
		{
			Shaderc.CompileOptionsSetForcedVersionProfileNative(options, version, profile);
		}

		/// <summary>
		/// Sets includer callback functions.<br/>
		/// </summary>
		public static void SetIncludeCallbacks(this ShadercCompileOptions options, ShadercIncludeResolveFn resolver, ShadercIncludeResultReleaseFn resultReleaser, void* userData)
		{
			Shaderc.CompileOptionsSetIncludeCallbacksNative(options, resolver, resultReleaser, userData);
		}

		/// <summary>
		/// Sets the compiler mode to suppress warnings, overriding warnings-as-errors<br/>
		/// mode. When both suppress-warnings and warnings-as-errors modes are<br/>
		/// turned on, warning messages will be inhibited, and will not be emitted<br/>
		/// as error messages.<br/>
		/// </summary>
		public static void SetSuppressWarnings(this ShadercCompileOptions options)
		{
			Shaderc.CompileOptionsSetSuppressWarningsNative(options);
		}

		/// <summary>
		/// Sets the target shader environment, affecting which warnings or errors will<br/>
		/// be issued.  The version will be for distinguishing between different versions<br/>
		/// of the target environment.  The version value should be either 0 or<br/>
		/// a value listed in shaderc_env_version.  The 0 value maps to Vulkan 1.0 if<br/>
		/// |target| is Vulkan, and it maps to OpenGL 4.5 if |target| is OpenGL.<br/>
		/// </summary>
		public static void SetTargetEnv(this ShadercCompileOptions options, ShadercTargetEnv target, uint version)
		{
			Shaderc.CompileOptionsSetTargetEnvNative(options, target, version);
		}

		/// <summary>
		/// Sets the target SPIR-V version. The generated module will use this version<br/>
		/// of SPIR-V.  Each target environment determines what versions of SPIR-V<br/>
		/// it can consume.  Defaults to the highest version of SPIR-V 1.0 which is<br/>
		/// required to be supported by the target environment.  E.g. Default to SPIR-V<br/>
		/// 1.0 for Vulkan 1.0 and SPIR-V 1.3 for Vulkan 1.1.<br/>
		/// </summary>
		public static void SetTargetSpirv(this ShadercCompileOptions options, ShadercSpirvVersion version)
		{
			Shaderc.CompileOptionsSetTargetSpirvNative(options, version);
		}

		/// <summary>
		/// Sets the compiler mode to treat all warnings as errors. Note the<br/>
		/// suppress-warnings mode overrides this option, i.e. if both<br/>
		/// warning-as-errors and suppress-warnings modes are set, warnings will not<br/>
		/// be emitted as error messages.<br/>
		/// </summary>
		public static void SetWarningsAsErrors(this ShadercCompileOptions options)
		{
			Shaderc.CompileOptionsSetWarningsAsErrorsNative(options);
		}

		/// <summary>
		/// Sets a resource limit.<br/>
		/// </summary>
		public static void SetLimit(this ShadercCompileOptions options, ShadercLimit limit, int value)
		{
			Shaderc.CompileOptionsSetLimitNative(options, limit, value);
		}

		/// <summary>
		/// Sets whether the compiler should automatically assign bindings to uniforms<br/>
		/// that aren't already explicitly bound in the shader source.<br/>
		/// </summary>
		public static void SetAutoBindUniforms(this ShadercCompileOptions options, bool autoBind)
		{
			Shaderc.CompileOptionsSetAutoBindUniformsNative(options, autoBind ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Sets whether the compiler should automatically remove sampler variables<br/>
		/// and convert image variables to combined image-sampler variables.<br/>
		/// </summary>
		public static void SetAutoCombinedImageSampler(this ShadercCompileOptions options, bool upgrade)
		{
			Shaderc.CompileOptionsSetAutoCombinedImageSamplerNative(options, upgrade ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Sets whether the compiler should use HLSL IO mapping rules for bindings.<br/>
		/// Defaults to false.<br/>
		/// </summary>
		public static void SetHlslIoMapping(this ShadercCompileOptions options, bool hlslIomap)
		{
			Shaderc.CompileOptionsSetHlslIoMappingNative(options, hlslIomap ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Sets whether the compiler should determine block member offsets using HLSL<br/>
		/// packing rules instead of standard GLSL rules.  Defaults to false.  Only<br/>
		/// affects GLSL compilation.  HLSL rules are always used when compiling HLSL.<br/>
		/// </summary>
		public static void SetHlslOffsets(this ShadercCompileOptions options, bool hlslOffsets)
		{
			Shaderc.CompileOptionsSetHlslOffsetsNative(options, hlslOffsets ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Sets the base binding number used for for a uniform resource type when<br/>
		/// automatically assigning bindings.  For GLSL compilation, sets the lowest<br/>
		/// automatically assigned number.  For HLSL compilation, the regsiter number<br/>
		/// assigned to the resource is added to this specified base.<br/>
		/// </summary>
		public static void SetBindingBase(this ShadercCompileOptions options, ShadercUniformKind kind, uint baseValue)
		{
			Shaderc.CompileOptionsSetBindingBaseNative(options, kind, baseValue);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_binding_base, but only takes effect when<br/>
		/// compiling a given shader stage.  The stage is assumed to be one of vertex,<br/>
		/// fragment, tessellation evaluation, tesselation control, geometry, or compute.<br/>
		/// </summary>
		public static void SetBindingBaseForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ShadercUniformKind kind, uint baseValue)
		{
			Shaderc.CompileOptionsSetBindingBaseForStageNative(options, shaderKind, kind, baseValue);
		}

		/// <summary>
		/// Sets whether the compiler should preserve all bindings, even when those<br/>
		/// bindings are not used.<br/>
		/// </summary>
		public static void SetPreserveBindings(this ShadercCompileOptions options, bool preserveBindings)
		{
			Shaderc.CompileOptionsSetPreserveBindingsNative(options, preserveBindings ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Sets whether the compiler should automatically assign locations to<br/>
		/// uniform variables that don't have explicit locations in the shader source.<br/>
		/// </summary>
		public static void SetAutoMapLocations(this ShadercCompileOptions options, bool autoMap)
		{
			Shaderc.CompileOptionsSetAutoMapLocationsNative(options, autoMap ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, byte* set, byte* binding)
		{
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, set, binding);
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ref byte reg, byte* set, byte* binding)
		{
			fixed (byte* preg = &reg)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, (byte*)preg, set, binding);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ReadOnlySpan<byte> reg, byte* set, byte* binding)
		{
			fixed (byte* preg = reg)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, (byte*)preg, set, binding);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, string reg, byte* set, byte* binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, pStr0, set, binding);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, ref byte set, byte* binding)
		{
			fixed (byte* pset = &set)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, (byte*)pset, binding);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, ReadOnlySpan<byte> set, byte* binding)
		{
			fixed (byte* pset = set)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, (byte*)pset, binding);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, string set, byte* binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (set != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(set);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(set, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, pStr0, binding);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ref byte reg, ref byte set, byte* binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, (byte*)preg, (byte*)pset, binding);
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ReadOnlySpan<byte> reg, ReadOnlySpan<byte> set, byte* binding)
		{
			fixed (byte* preg = reg)
			{
				fixed (byte* pset = set)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, (byte*)preg, (byte*)pset, binding);
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, string reg, string set, byte* binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (set != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(set);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(set, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, pStr0, pStr1, binding);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, byte* set, ref byte binding)
		{
			fixed (byte* pbinding = &binding)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, set, (byte*)pbinding);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, byte* set, ReadOnlySpan<byte> binding)
		{
			fixed (byte* pbinding = binding)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, set, (byte*)pbinding);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, byte* set, string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (binding != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(binding);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(binding, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, set, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ref byte reg, byte* set, ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pbinding = &binding)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, (byte*)preg, set, (byte*)pbinding);
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ReadOnlySpan<byte> reg, byte* set, ReadOnlySpan<byte> binding)
		{
			fixed (byte* preg = reg)
			{
				fixed (byte* pbinding = binding)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, (byte*)preg, set, (byte*)pbinding);
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, string reg, byte* set, string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (binding != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(binding);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(binding, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, pStr0, set, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, ref byte set, ref byte binding)
		{
			fixed (byte* pset = &set)
			{
				fixed (byte* pbinding = &binding)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, (byte*)pset, (byte*)pbinding);
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, ReadOnlySpan<byte> set, ReadOnlySpan<byte> binding)
		{
			fixed (byte* pset = set)
			{
				fixed (byte* pbinding = binding)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, (byte*)pset, (byte*)pbinding);
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, string set, string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (set != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(set);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(set, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (binding != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(binding);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(binding, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ref byte reg, ref byte set, ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					fixed (byte* pbinding = &binding)
					{
						Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, (byte*)preg, (byte*)pset, (byte*)pbinding);
					}
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ReadOnlySpan<byte> reg, ReadOnlySpan<byte> set, ReadOnlySpan<byte> binding)
		{
			fixed (byte* preg = reg)
			{
				fixed (byte* pset = set)
				{
					fixed (byte* pbinding = binding)
					{
						Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, (byte*)preg, (byte*)pset, (byte*)pbinding);
					}
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>
		/// This method keeps a copy of the string data.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, string reg, string set, string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (set != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(set);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(set, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (binding != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(binding);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(binding, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, pStr0, pStr1, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, byte* set, byte* binding)
		{
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, set, binding);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ref byte reg, byte* set, byte* binding)
		{
			fixed (byte* preg = &reg)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, set, binding);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ReadOnlySpan<byte> reg, byte* set, byte* binding)
		{
			fixed (byte* preg = reg)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, set, binding);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, string reg, byte* set, byte* binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, pStr0, set, binding);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, ref byte set, byte* binding)
		{
			fixed (byte* pset = &set)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, (byte*)pset, binding);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, ReadOnlySpan<byte> set, byte* binding)
		{
			fixed (byte* pset = set)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, (byte*)pset, binding);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, string set, byte* binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (set != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(set);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(set, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, pStr0, binding);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ref byte reg, ref byte set, byte* binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, (byte*)pset, binding);
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ReadOnlySpan<byte> reg, ReadOnlySpan<byte> set, byte* binding)
		{
			fixed (byte* preg = reg)
			{
				fixed (byte* pset = set)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, (byte*)pset, binding);
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, string reg, string set, byte* binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (set != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(set);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(set, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, pStr0, pStr1, binding);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, byte* set, ref byte binding)
		{
			fixed (byte* pbinding = &binding)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, set, (byte*)pbinding);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, byte* set, ReadOnlySpan<byte> binding)
		{
			fixed (byte* pbinding = binding)
			{
				Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, set, (byte*)pbinding);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, byte* set, string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (binding != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(binding);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(binding, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, set, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ref byte reg, byte* set, ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pbinding = &binding)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, set, (byte*)pbinding);
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ReadOnlySpan<byte> reg, byte* set, ReadOnlySpan<byte> binding)
		{
			fixed (byte* preg = reg)
			{
				fixed (byte* pbinding = binding)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, set, (byte*)pbinding);
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, string reg, byte* set, string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (binding != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(binding);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(binding, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, pStr0, set, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, ref byte set, ref byte binding)
		{
			fixed (byte* pset = &set)
			{
				fixed (byte* pbinding = &binding)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, (byte*)pset, (byte*)pbinding);
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, ReadOnlySpan<byte> set, ReadOnlySpan<byte> binding)
		{
			fixed (byte* pset = set)
			{
				fixed (byte* pbinding = binding)
				{
					Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, (byte*)pset, (byte*)pbinding);
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, string set, string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (set != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(set);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(set, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (binding != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(binding);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(binding, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ref byte reg, ref byte set, ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					fixed (byte* pbinding = &binding)
					{
						Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, (byte*)pset, (byte*)pbinding);
					}
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ReadOnlySpan<byte> reg, ReadOnlySpan<byte> set, ReadOnlySpan<byte> binding)
		{
			fixed (byte* preg = reg)
			{
				fixed (byte* pset = set)
				{
					fixed (byte* pbinding = binding)
					{
						Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, (byte*)pset, (byte*)pbinding);
					}
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>
		/// but affects all shader stages.<br/>
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, string reg, string set, string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (set != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(set);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(set, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (binding != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(binding);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(binding, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			Shaderc.CompileOptionsSetHlslRegisterSetAndBindingNative(options, pStr0, pStr1, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Sets whether the compiler should enable extension<br/>
		/// SPV_GOOGLE_hlsl_functionality1.<br/>
		/// </summary>
		public static void SetHlslFunctionality1(this ShadercCompileOptions options, bool enable)
		{
			Shaderc.CompileOptionsSetHlslFunctionality1Native(options, enable ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Sets whether 16-bit types are supported in HLSL or not.<br/>
		/// </summary>
		public static void SetHlsl16BitTypes(this ShadercCompileOptions options, bool enable)
		{
			Shaderc.CompileOptionsSetHlsl16BitTypesNative(options, enable ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Enables or disables relaxed Vulkan rules.<br/>
		/// This allows most OpenGL shaders to compile under Vulkan semantics.<br/>
		/// </summary>
		public static void SetVulkanRulesRelaxed(this ShadercCompileOptions options, bool enable)
		{
			Shaderc.CompileOptionsSetVulkanRulesRelaxedNative(options, enable ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Sets whether the compiler should invert position.Y output in vertex shader.<br/>
		/// </summary>
		public static void SetInvertY(this ShadercCompileOptions options, bool enable)
		{
			Shaderc.CompileOptionsSetInvertYNative(options, enable ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Sets whether the compiler generates code for max and min builtins which,<br/>
		/// if given a NaN operand, will return the other operand. Similarly, the clamp<br/>
		/// builtin will favour the non-NaN operands, as if clamp were implemented<br/>
		/// as a composition of max and min.<br/>
		/// </summary>
		public static void SetNanClamp(this ShadercCompileOptions options, bool enable)
		{
			Shaderc.CompileOptionsSetNanClampNative(options, enable ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Releases the resources held by the shaderc_compiler_t.<br/>
		/// After this call it is invalid to make any future calls to functions<br/>
		/// involving this shaderc_compiler_t.<br/>
		/// </summary>
		public static void Release(this ShadercCompilationResult result)
		{
			Shaderc.ResultReleaseNative(result);
		}

		/// <summary>
		/// Returns the number of bytes of the compilation output data in a result<br/>
		/// object.<br/>
		/// </summary>
		public static nuint GetLength(this ShadercCompilationResult result)
		{
			nuint ret = Shaderc.ResultGetLengthNative(result);
			return ret;
		}

		/// <summary>
		/// Returns the number of warnings generated during the compilation.<br/>
		/// </summary>
		public static nuint GetNumWarnings(this ShadercCompilationResult result)
		{
			nuint ret = Shaderc.ResultGetNumWarningsNative(result);
			return ret;
		}

		/// <summary>
		/// Returns the number of errors generated during the compilation.<br/>
		/// </summary>
		public static nuint GetNumErrors(this ShadercCompilationResult result)
		{
			nuint ret = Shaderc.ResultGetNumErrorsNative(result);
			return ret;
		}

		/// <summary>
		/// Returns the compilation status, indicating whether the compilation succeeded,<br/>
		/// or failed due to some reasons, like invalid shader stage or compilation<br/>
		/// errors.<br/>
		/// </summary>
		public static ShadercCompilationStatus GetCompilationStatus(this ShadercCompilationResult unknown0)
		{
			ShadercCompilationStatus ret = Shaderc.ResultGetCompilationStatusNative(unknown0);
			return ret;
		}

		/// <summary>
		/// Returns a pointer to the start of the compilation output data bytes, either<br/>
		/// SPIR-V binary or char string. When the source string is compiled into SPIR-V<br/>
		/// binary, this is guaranteed to be castable to a uint32_t*. If the result<br/>
		/// contains assembly text or preprocessed source text, the pointer will point to<br/>
		/// the resulting array of characters.<br/>
		/// </summary>
		public static byte* GetBytes(this ShadercCompilationResult result)
		{
			byte* ret = Shaderc.ResultGetBytesNative(result);
			return ret;
		}

		/// <summary>
		/// Returns a pointer to the start of the compilation output data bytes, either<br/>
		/// SPIR-V binary or char string. When the source string is compiled into SPIR-V<br/>
		/// binary, this is guaranteed to be castable to a uint32_t*. If the result<br/>
		/// contains assembly text or preprocessed source text, the pointer will point to<br/>
		/// the resulting array of characters.<br/>
		/// </summary>
		public static string GetBytesS(this ShadercCompilationResult result)
		{
			string ret = Utils.DecodeStringUTF8(Shaderc.ResultGetBytesNative(result));
			return ret;
		}

		/// <summary>
		/// Returns a null-terminated string that contains any error messages generated<br/>
		/// during the compilation.<br/>
		/// </summary>
		public static byte* GetErrorMessage(this ShadercCompilationResult result)
		{
			byte* ret = Shaderc.ResultGetErrorMessageNative(result);
			return ret;
		}

		/// <summary>
		/// Returns a null-terminated string that contains any error messages generated<br/>
		/// during the compilation.<br/>
		/// </summary>
		public static string GetErrorMessageS(this ShadercCompilationResult result)
		{
			string ret = Utils.DecodeStringUTF8(Shaderc.ResultGetErrorMessageNative(result));
			return ret;
		}

	}
}
