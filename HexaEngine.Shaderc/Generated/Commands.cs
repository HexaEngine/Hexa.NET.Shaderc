// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;

namespace HexaEngine.Shaderc
{
	public unsafe partial class Shaderc
	{
		internal const string LibName = "shaderc_shared";

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compiler_initialize")]
		public static extern ShadercCompilerT* ShadercCompilerInitialize();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compiler_release")]
		public static extern void ShadercCompilerRelease(ShadercCompilerT* shaderc_compiler);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_initialize")]
		public static extern ShadercCompileOptionsT* ShadercCompileOptionsInitialize();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_clone")]
		public static extern ShadercCompileOptionsT* ShadercCompileOptionsClone(ShadercCompileOptionsT* options);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_release")]
		public static extern void ShadercCompileOptionsRelease(ShadercCompileOptionsT* options);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_add_macro_definition")]
		public static extern void ShadercCompileOptionsAddMacroDefinition(ShadercCompileOptionsT* options, byte* name, nuint name_length, byte* value, nuint value_length);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_source_language")]
		public static extern void ShadercCompileOptionsSetSourceLanguage(ShadercCompileOptionsT* options, ShadercSourceLanguage lang);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_generate_debug_info")]
		public static extern void ShadercCompileOptionsSetGenerateDebugInfo(ShadercCompileOptionsT* options);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_optimization_level")]
		public static extern void ShadercCompileOptionsSetOptimizationLevel(ShadercCompileOptionsT* options, ShadercOptimizationLevel level);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_forced_version_profile")]
		public static extern void ShadercCompileOptionsSetForcedVersionProfile(ShadercCompileOptionsT* options, int version, ShadercProfile profile);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_include_callbacks")]
		public static extern void ShadercCompileOptionsSetIncludeCallbacks(ShadercCompileOptionsT* options, ShadercIncludeResolveFn* resolver, ShadercIncludeResultReleaseFn* result_releaser, void* user_data);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_suppress_warnings")]
		public static extern void ShadercCompileOptionsSetSuppressWarnings(ShadercCompileOptionsT* options);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_target_env")]
		public static extern void ShadercCompileOptionsSetTargetEnv(ShadercCompileOptionsT* options, ShadercTargetEnv target, uint version);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_target_spirv")]
		public static extern void ShadercCompileOptionsSetTargetSpirv(ShadercCompileOptionsT* options, ShadercSpirvVersion version);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_warnings_as_errors")]
		public static extern void ShadercCompileOptionsSetWarningsAsErrors(ShadercCompileOptionsT* options);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_limit")]
		public static extern void ShadercCompileOptionsSetLimit(ShadercCompileOptionsT* options, ShadercLimit limit, int value);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_auto_bind_uniforms")]
		public static extern void ShadercCompileOptionsSetAutoBindUniforms(ShadercCompileOptionsT* options, bool auto_bind);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_auto_combined_image_sampler")]
		public static extern void ShadercCompileOptionsSetAutoCombinedImageSampler(ShadercCompileOptionsT* options, bool upgrade);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_hlsl_io_mapping")]
		public static extern void ShadercCompileOptionsSetHlslIoMapping(ShadercCompileOptionsT* options, bool hlsl_iomap);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_hlsl_offsets")]
		public static extern void ShadercCompileOptionsSetHlslOffsets(ShadercCompileOptionsT* options, bool hlsl_offsets);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_binding_base")]
		public static extern void ShadercCompileOptionsSetBindingBase(ShadercCompileOptionsT* options, ShadercUniformKind kind, uint @base);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_binding_base_for_stage")]
		public static extern void ShadercCompileOptionsSetBindingBaseForStage(ShadercCompileOptionsT* options, ShadercShaderKind shader_kind, ShadercUniformKind kind, uint @base);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_preserve_bindings")]
		public static extern void ShadercCompileOptionsSetPreserveBindings(ShadercCompileOptionsT* options, bool preserve_bindings);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_auto_map_locations")]
		public static extern void ShadercCompileOptionsSetAutoMapLocations(ShadercCompileOptionsT* options, bool auto_map);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		public static extern void ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(ShadercCompileOptionsT* options, ShadercShaderKind shader_kind, byte* reg, byte* set, byte* binding);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		public static extern void ShadercCompileOptionsSetHlslRegisterSetAndBinding(ShadercCompileOptionsT* options, byte* reg, byte* set, byte* binding);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_hlsl_functionality1")]
		public static extern void ShadercCompileOptionsSetHlslFunctionality1(ShadercCompileOptionsT* options, bool enable);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_hlsl_16bit_types")]
		public static extern void ShadercCompileOptionsSetHlsl16bitTypes(ShadercCompileOptionsT* options, bool enable);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_invert_y")]
		public static extern void ShadercCompileOptionsSetInvertY(ShadercCompileOptionsT* options, bool enable);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_options_set_nan_clamp")]
		public static extern void ShadercCompileOptionsSetNanClamp(ShadercCompileOptionsT* options, bool enable);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_into_spv")]
		public static extern ShadercCompilationResultT* ShadercCompileIntoSpv(ShadercCompilerT* compiler, byte* source_text, nuint source_text_size, ShadercShaderKind shader_kind, byte* input_file_name, byte* entry_point_name, ShadercCompileOptionsT* additional_options);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_into_spv_assembly")]
		public static extern ShadercCompilationResultT* ShadercCompileIntoSpvAssembly(ShadercCompilerT* compiler, byte* source_text, nuint source_text_size, ShadercShaderKind shader_kind, byte* input_file_name, byte* entry_point_name, ShadercCompileOptionsT* additional_options);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_compile_into_preprocessed_text")]
		public static extern ShadercCompilationResultT* ShadercCompileIntoPreprocessedText(ShadercCompilerT* compiler, byte* source_text, nuint source_text_size, ShadercShaderKind shader_kind, byte* input_file_name, byte* entry_point_name, ShadercCompileOptionsT* additional_options);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_assemble_into_spv")]
		public static extern ShadercCompilationResultT* ShadercAssembleIntoSpv(ShadercCompilerT* compiler, byte* source_assembly, nuint source_assembly_size, ShadercCompileOptionsT* additional_options);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_result_release")]
		public static extern void ShadercResultRelease(ShadercCompilationResultT* result);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_result_get_length")]
		public static extern nuint ShadercResultGetLength(ShadercCompilationResultT* result);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_result_get_num_warnings")]
		public static extern nuint ShadercResultGetNumWarnings(ShadercCompilationResultT* result);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_result_get_num_errors")]
		public static extern nuint ShadercResultGetNumErrors(ShadercCompilationResultT* result);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_result_get_compilation_status")]
		public static extern ShadercCompilationStatus ShadercResultGetCompilationStatus(ShadercCompilationResultT* shaderc_compilation_result_t);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_result_get_bytes")]
		public static extern byte* ShadercResultGetBytes(ShadercCompilationResultT* result);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_result_get_error_message")]
		public static extern byte* ShadercResultGetErrorMessage(ShadercCompilationResultT* result);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_get_spv_version")]
		public static extern void ShadercGetSpvVersion(uint* version, uint* revision);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "shaderc_parse_version_profile")]
		public static extern bool ShadercParseVersionProfile(byte* str, int* version, ShadercProfile* profile);

	}
}
