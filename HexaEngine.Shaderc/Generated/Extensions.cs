// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace HexaEngine.Shaderc
{
	public static unsafe class Extensions
	{
		/// <summary>
		/// Releases the resources held by the shaderc_compiler_t.
		/// After this call it is invalid to make any future calls to functions
		/// involving this shaderc_compiler_t.
		/// </summary>
		public static void Release(this ShadercCompiler shaderc_compiler)
		{
			Shaderc.ShadercCompilerRelease(shaderc_compiler);
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, psourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, sourceText, sourceTextSize, shaderKind, pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, sourceText, sourceTextSize, shaderKind, pStr0, entryPointName, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, psourceText, sourceTextSize, shaderKind, pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, pStr0, sourceTextSize, shaderKind, pStr1, entryPointName, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = &entryPointName)
			{
				ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pStr0, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, psourceText, sourceTextSize, shaderKind, inputFileName, pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, pStr1, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, sourceText, sourceTextSize, shaderKind, pinputFileName, pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, sourceText, sourceTextSize, shaderKind, pStr0, pStr1, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					fixed (byte* pentryPointName = &entryPointName)
					{
						ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, psourceText, sourceTextSize, shaderKind, pinputFileName, pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			byte* pStr2 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, pStr0, sourceTextSize, shaderKind, pStr1, pStr2, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr2);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Takes a GLSL source string and the associated shader kind, input file
		/// name, compiles it according to the given additional_options. If the shader
		/// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
		/// the compiler will try to deduce the shader kind from the source
		/// string and a failure in deducing will generate an error. Currently only
		/// #pragma annotation is supported. If the shader kind is set to one of the
		/// default shader kinds, the compiler will fall back to the default shader
		/// kind in case it failed to deduce the shader kind from source string.
		/// The input_file_name is a null-termintated string. It is used as a tag to
		/// identify the source string in cases like emitting error messages. It
		/// doesn't have to be a 'file name'.
		/// The source string will be compiled into SPIR-V binary and a
		/// shaderc_compilation_result will be returned to hold the results.
		/// The entry_point_name null-terminated string defines the name of the entry
		/// point to associate with this GLSL source. If the additional_options
		/// parameter is not null, then the compilation is modified by any options
		/// present.  May be safely called from multiple threads without explicit
		/// synchronization. If there was failure in allocating the compiler object,
		/// null will be returned.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpv(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpv(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, psourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, sourceText, sourceTextSize, shaderKind, pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, sourceText, sourceTextSize, shaderKind, pStr0, entryPointName, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, psourceText, sourceTextSize, shaderKind, pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, pStr0, sourceTextSize, shaderKind, pStr1, entryPointName, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = &entryPointName)
			{
				ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pStr0, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, psourceText, sourceTextSize, shaderKind, inputFileName, pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, pStr1, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, sourceText, sourceTextSize, shaderKind, pinputFileName, pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, sourceText, sourceTextSize, shaderKind, pStr0, pStr1, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					fixed (byte* pentryPointName = &entryPointName)
					{
						ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, psourceText, sourceTextSize, shaderKind, pinputFileName, pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			byte* pStr2 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, pStr0, sourceTextSize, shaderKind, pStr1, pStr2, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr2);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
		/// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
		/// by the SPIRV-Tools open source project.
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoSpvAssembly(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoSpvAssembly(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, psourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, sourceText, sourceTextSize, shaderKind, pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, sourceText, sourceTextSize, shaderKind, pStr0, entryPointName, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, psourceText, sourceTextSize, shaderKind, pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, pStr0, sourceTextSize, shaderKind, pStr1, entryPointName, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = &entryPointName)
			{
				ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pStr0, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, psourceText, sourceTextSize, shaderKind, inputFileName, pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, pStr1, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, sourceText, sourceTextSize, shaderKind, pinputFileName, pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, sourceText, sourceTextSize, shaderKind, pStr0, pStr1, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, ref byte sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, ref byte inputFileName, ref byte entryPointName, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					fixed (byte* pentryPointName = &entryPointName)
					{
						ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, psourceText, sourceTextSize, shaderKind, pinputFileName, pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, string sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, string inputFileName, string entryPointName, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceText);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(inputFileName);
			byte* pStr2 = (byte*)Marshal.StringToHGlobalAnsi(entryPointName);
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, pStr0, sourceTextSize, shaderKind, pStr1, pStr2, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr2);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Like shaderc_compile_into_spv, but the result contains preprocessed source
		/// code instead of a SPIR-V binary module
		/// </summary>
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText(this ShadercCompiler compiler, byte* sourceText, nuint sourceTextSize, ShadercShaderKind shaderKind, byte* inputFileName, byte* entryPointName, ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = Shaderc.ShadercCompileIntoPreprocessedText(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			return ret;
		}

		/// <summary>
		/// Takes an assembly string of the format defined in the SPIRV-Tools project
		/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),
		/// assembles it into SPIR-V binary and a shaderc_compilation_result will be
		/// returned to hold the results.
		/// The assembling will pick options suitable for assembling specified in the
		/// additional_options parameter.
		/// May be safely called from multiple threads without explicit synchronization.
		/// If there was failure in allocating the compiler object, null will be
		/// returned.
		/// </summary>
		public static ShadercCompilationResult ShadercAssembleIntoSpv(this ShadercCompiler compiler, ref byte sourceAssembly, nuint sourceAssemblySize, ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceAssembly = &sourceAssembly)
			{
				ShadercCompilationResult ret = Shaderc.ShadercAssembleIntoSpv(compiler, psourceAssembly, sourceAssemblySize, additionalOptions);
				return ret;
			}
		}

		/// <summary>
		/// Takes an assembly string of the format defined in the SPIRV-Tools project
		/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),
		/// assembles it into SPIR-V binary and a shaderc_compilation_result will be
		/// returned to hold the results.
		/// The assembling will pick options suitable for assembling specified in the
		/// additional_options parameter.
		/// May be safely called from multiple threads without explicit synchronization.
		/// If there was failure in allocating the compiler object, null will be
		/// returned.
		/// </summary>
		public static ShadercCompilationResult ShadercAssembleIntoSpv(this ShadercCompiler compiler, string sourceAssembly, nuint sourceAssemblySize, ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(sourceAssembly);
			ShadercCompilationResult ret = Shaderc.ShadercAssembleIntoSpv(compiler, pStr0, sourceAssemblySize, additionalOptions);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Takes an assembly string of the format defined in the SPIRV-Tools project
		/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),
		/// assembles it into SPIR-V binary and a shaderc_compilation_result will be
		/// returned to hold the results.
		/// The assembling will pick options suitable for assembling specified in the
		/// additional_options parameter.
		/// May be safely called from multiple threads without explicit synchronization.
		/// If there was failure in allocating the compiler object, null will be
		/// returned.
		/// </summary>
		public static ShadercCompilationResult ShadercAssembleIntoSpv(this ShadercCompiler compiler, byte* sourceAssembly, nuint sourceAssemblySize, ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = Shaderc.ShadercAssembleIntoSpv(compiler, sourceAssembly, sourceAssemblySize, additionalOptions);
			return ret;
		}

		/// <summary>
		/// Returns a copy of the given shaderc_compile_options_t.
		/// If NULL is passed as the parameter the call is the same as
		/// shaderc_compile_options_init.
		/// </summary>
		public static ShadercCompileOptions Clone(this ShadercCompileOptions options)
		{
			ShadercCompileOptions ret = Shaderc.ShadercCompileOptionsClone(options);
			return ret;
		}

		/// <summary>
		/// Releases the compilation options. It is invalid to use the given
		/// shaderc_compile_options_t object in any future calls. It is safe to pass
		/// NULL to this function, and doing such will have no effect.
		/// </summary>
		public static void Release(this ShadercCompileOptions options)
		{
			Shaderc.ShadercCompileOptionsRelease(options);
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same
		/// effect as passing -Dname=value to the command-line compiler.  If value
		/// is NULL, it has the same effect as passing -Dname to the command-line
		/// compiler. If a macro definition with the same name has previously been
		/// added, the value is replaced with the new value. The macro name and
		/// value are passed in with char pointers, which point to their data, and
		/// the lengths of their data. The strings that the name and value pointers
		/// point to must remain valid for the duration of the call, but can be
		/// modified or deleted after this function has returned. In case of adding
		/// a valueless macro, the value argument should be a null pointer or the
		/// value_length should be 0u.
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, ref byte name, nuint nameLength, byte* value, nuint valueLength)
		{
			fixed (byte* pname = &name)
			{
				Shaderc.ShadercCompileOptionsAddMacroDefinition(options, pname, nameLength, value, valueLength);
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same
		/// effect as passing -Dname=value to the command-line compiler.  If value
		/// is NULL, it has the same effect as passing -Dname to the command-line
		/// compiler. If a macro definition with the same name has previously been
		/// added, the value is replaced with the new value. The macro name and
		/// value are passed in with char pointers, which point to their data, and
		/// the lengths of their data. The strings that the name and value pointers
		/// point to must remain valid for the duration of the call, but can be
		/// modified or deleted after this function has returned. In case of adding
		/// a valueless macro, the value argument should be a null pointer or the
		/// value_length should be 0u.
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, string name, nuint nameLength, byte* value, nuint valueLength)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(name);
			Shaderc.ShadercCompileOptionsAddMacroDefinition(options, pStr0, nameLength, value, valueLength);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same
		/// effect as passing -Dname=value to the command-line compiler.  If value
		/// is NULL, it has the same effect as passing -Dname to the command-line
		/// compiler. If a macro definition with the same name has previously been
		/// added, the value is replaced with the new value. The macro name and
		/// value are passed in with char pointers, which point to their data, and
		/// the lengths of their data. The strings that the name and value pointers
		/// point to must remain valid for the duration of the call, but can be
		/// modified or deleted after this function has returned. In case of adding
		/// a valueless macro, the value argument should be a null pointer or the
		/// value_length should be 0u.
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, byte* name, nuint nameLength, ref byte value, nuint valueLength)
		{
			fixed (byte* pvalue = &value)
			{
				Shaderc.ShadercCompileOptionsAddMacroDefinition(options, name, nameLength, pvalue, valueLength);
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same
		/// effect as passing -Dname=value to the command-line compiler.  If value
		/// is NULL, it has the same effect as passing -Dname to the command-line
		/// compiler. If a macro definition with the same name has previously been
		/// added, the value is replaced with the new value. The macro name and
		/// value are passed in with char pointers, which point to their data, and
		/// the lengths of their data. The strings that the name and value pointers
		/// point to must remain valid for the duration of the call, but can be
		/// modified or deleted after this function has returned. In case of adding
		/// a valueless macro, the value argument should be a null pointer or the
		/// value_length should be 0u.
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, byte* name, nuint nameLength, string value, nuint valueLength)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(value);
			Shaderc.ShadercCompileOptionsAddMacroDefinition(options, name, nameLength, pStr0, valueLength);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same
		/// effect as passing -Dname=value to the command-line compiler.  If value
		/// is NULL, it has the same effect as passing -Dname to the command-line
		/// compiler. If a macro definition with the same name has previously been
		/// added, the value is replaced with the new value. The macro name and
		/// value are passed in with char pointers, which point to their data, and
		/// the lengths of their data. The strings that the name and value pointers
		/// point to must remain valid for the duration of the call, but can be
		/// modified or deleted after this function has returned. In case of adding
		/// a valueless macro, the value argument should be a null pointer or the
		/// value_length should be 0u.
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, ref byte name, nuint nameLength, ref byte value, nuint valueLength)
		{
			fixed (byte* pname = &name)
			{
				fixed (byte* pvalue = &value)
				{
					Shaderc.ShadercCompileOptionsAddMacroDefinition(options, pname, nameLength, pvalue, valueLength);
				}
			}
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same
		/// effect as passing -Dname=value to the command-line compiler.  If value
		/// is NULL, it has the same effect as passing -Dname to the command-line
		/// compiler. If a macro definition with the same name has previously been
		/// added, the value is replaced with the new value. The macro name and
		/// value are passed in with char pointers, which point to their data, and
		/// the lengths of their data. The strings that the name and value pointers
		/// point to must remain valid for the duration of the call, but can be
		/// modified or deleted after this function has returned. In case of adding
		/// a valueless macro, the value argument should be a null pointer or the
		/// value_length should be 0u.
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, string name, nuint nameLength, string value, nuint valueLength)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(name);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(value);
			Shaderc.ShadercCompileOptionsAddMacroDefinition(options, pStr0, nameLength, pStr1, valueLength);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Adds a predefined macro to the compilation options. This has the same
		/// effect as passing -Dname=value to the command-line compiler.  If value
		/// is NULL, it has the same effect as passing -Dname to the command-line
		/// compiler. If a macro definition with the same name has previously been
		/// added, the value is replaced with the new value. The macro name and
		/// value are passed in with char pointers, which point to their data, and
		/// the lengths of their data. The strings that the name and value pointers
		/// point to must remain valid for the duration of the call, but can be
		/// modified or deleted after this function has returned. In case of adding
		/// a valueless macro, the value argument should be a null pointer or the
		/// value_length should be 0u.
		/// </summary>
		public static void AddMacroDefinition(this ShadercCompileOptions options, byte* name, nuint nameLength, byte* value, nuint valueLength)
		{
			Shaderc.ShadercCompileOptionsAddMacroDefinition(options, name, nameLength, value, valueLength);
		}

		/// <summary>
		/// Sets the source language.  The default is GLSL.
		/// </summary>
		public static void SetSourceLanguage(this ShadercCompileOptions options, ShadercSourceLanguage lang)
		{
			Shaderc.ShadercCompileOptionsSetSourceLanguage(options, lang);
		}

		/// <summary>
		/// Sets the compiler mode to generate debug information in the output.
		/// </summary>
		public static void SetGenerateDebugInfo(this ShadercCompileOptions options)
		{
			Shaderc.ShadercCompileOptionsSetGenerateDebugInfo(options);
		}

		/// <summary>
		/// Sets the compiler optimization level to the given level. Only the last one
		/// takes effect if multiple calls of this function exist.
		/// </summary>
		public static void SetOptimizationLevel(this ShadercCompileOptions options, ShadercOptimizationLevel level)
		{
			Shaderc.ShadercCompileOptionsSetOptimizationLevel(options, level);
		}

		/// <summary>
		/// Forces the GLSL language version and profile to a given pair. The version
		/// number is the same as would appear in the #version annotation in the source.
		/// Version and profile specified here overrides the #version annotation in the
		/// source. Use profile: 'shaderc_profile_none' for GLSL versions that do not
		/// define profiles, e.g. versions below 150.
		/// </summary>
		public static void SetForcedVersionProfile(this ShadercCompileOptions options, int version, ShadercProfile profile)
		{
			Shaderc.ShadercCompileOptionsSetForcedVersionProfile(options, version, profile);
		}

		/// <summary>
		/// Sets includer callback functions.
		/// </summary>
		public static void SetIncludeCallbacks(this ShadercCompileOptions options, ShadercIncludeResolveFn resolver, ShadercIncludeResultReleaseFn resultReleaser, void* userData)
		{
			Shaderc.ShadercCompileOptionsSetIncludeCallbacks(options, resolver, resultReleaser, userData);
		}

		/// <summary>
		/// Sets the compiler mode to suppress warnings, overriding warnings-as-errors
		/// mode. When both suppress-warnings and warnings-as-errors modes are
		/// turned on, warning messages will be inhibited, and will not be emitted
		/// as error messages.
		/// </summary>
		public static void SetSuppressWarnings(this ShadercCompileOptions options)
		{
			Shaderc.ShadercCompileOptionsSetSuppressWarnings(options);
		}

		/// <summary>
		/// Sets the target shader environment, affecting which warnings or errors will
		/// be issued.  The version will be for distinguishing between different versions
		/// of the target environment.  The version value should be either 0 or
		/// a value listed in shaderc_env_version.  The 0 value maps to Vulkan 1.0 if
		/// |target| is Vulkan, and it maps to OpenGL 4.5 if |target| is OpenGL.
		/// </summary>
		public static void SetTargetEnv(this ShadercCompileOptions options, ShadercTargetEnv target, uint version)
		{
			Shaderc.ShadercCompileOptionsSetTargetEnv(options, target, version);
		}

		/// <summary>
		/// Sets the target SPIR-V version. The generated module will use this version
		/// of SPIR-V.  Each target environment determines what versions of SPIR-V
		/// it can consume.  Defaults to the highest version of SPIR-V 1.0 which is
		/// required to be supported by the target environment.  E.g. Default to SPIR-V
		/// 1.0 for Vulkan 1.0 and SPIR-V 1.3 for Vulkan 1.1.
		/// </summary>
		public static void SetTargetSpirv(this ShadercCompileOptions options, ShadercSpirvVersion version)
		{
			Shaderc.ShadercCompileOptionsSetTargetSpirv(options, version);
		}

		/// <summary>
		/// Sets the compiler mode to treat all warnings as errors. Note the
		/// suppress-warnings mode overrides this option, i.e. if both
		/// warning-as-errors and suppress-warnings modes are set, warnings will not
		/// be emitted as error messages.
		/// </summary>
		public static void SetWarningsAsErrors(this ShadercCompileOptions options)
		{
			Shaderc.ShadercCompileOptionsSetWarningsAsErrors(options);
		}

		/// <summary>
		/// Sets a resource limit.
		/// </summary>
		public static void SetLimit(this ShadercCompileOptions options, ShadercLimit limit, int value)
		{
			Shaderc.ShadercCompileOptionsSetLimit(options, limit, value);
		}

		/// <summary>
		/// Sets whether the compiler should automatically assign bindings to uniforms
		/// that aren't already explicitly bound in the shader source.
		/// </summary>
		public static void SetAutoBindUniforms(this ShadercCompileOptions options, bool autoBind)
		{
			Shaderc.ShadercCompileOptionsSetAutoBindUniforms(options, autoBind);
		}

		/// <summary>
		/// Sets whether the compiler should automatically remove sampler variables
		/// and convert image variables to combined image-sampler variables.
		/// </summary>
		public static void SetAutoCombinedImageSampler(this ShadercCompileOptions options, bool upgrade)
		{
			Shaderc.ShadercCompileOptionsSetAutoCombinedImageSampler(options, upgrade);
		}

		/// <summary>
		/// Sets whether the compiler should use HLSL IO mapping rules for bindings.
		/// Defaults to false.
		/// </summary>
		public static void SetHlslIoMapping(this ShadercCompileOptions options, bool hlslIomap)
		{
			Shaderc.ShadercCompileOptionsSetHlslIoMapping(options, hlslIomap);
		}

		/// <summary>
		/// Sets whether the compiler should determine block member offsets using HLSL
		/// packing rules instead of standard GLSL rules.  Defaults to false.  Only
		/// affects GLSL compilation.  HLSL rules are always used when compiling HLSL.
		/// </summary>
		public static void SetHlslOffsets(this ShadercCompileOptions options, bool hlslOffsets)
		{
			Shaderc.ShadercCompileOptionsSetHlslOffsets(options, hlslOffsets);
		}

		/// <summary>
		/// Sets the base binding number used for for a uniform resource type when
		/// automatically assigning bindings.  For GLSL compilation, sets the lowest
		/// automatically assigned number.  For HLSL compilation, the regsiter number
		/// assigned to the resource is added to this specified base.
		/// </summary>
		public static void SetBindingBase(this ShadercCompileOptions options, ShadercUniformKind kind, uint @base)
		{
			Shaderc.ShadercCompileOptionsSetBindingBase(options, kind, @base);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_binding_base, but only takes effect when
		/// compiling a given shader stage.  The stage is assumed to be one of vertex,
		/// fragment, tessellation evaluation, tesselation control, geometry, or compute.
		/// </summary>
		public static void SetBindingBaseForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ShadercUniformKind kind, uint @base)
		{
			Shaderc.ShadercCompileOptionsSetBindingBaseForStage(options, shaderKind, kind, @base);
		}

		/// <summary>
		/// Sets whether the compiler should preserve all bindings, even when those
		/// bindings are not used.
		/// </summary>
		public static void SetPreserveBindings(this ShadercCompileOptions options, bool preserveBindings)
		{
			Shaderc.ShadercCompileOptionsSetPreserveBindings(options, preserveBindings);
		}

		/// <summary>
		/// Sets whether the compiler should automatically assign locations to
		/// uniform variables that don't have explicit locations in the shader source.
		/// </summary>
		public static void SetAutoMapLocations(this ShadercCompileOptions options, bool autoMap)
		{
			Shaderc.ShadercCompileOptionsSetAutoMapLocations(options, autoMap);
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ref byte reg, byte* set, byte* binding)
		{
			fixed (byte* preg = &reg)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, preg, set, binding);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, string reg, byte* set, byte* binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(reg);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, pStr0, set, binding);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, ref byte set, byte* binding)
		{
			fixed (byte* pset = &set)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, reg, pset, binding);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, string set, byte* binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(set);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, reg, pStr0, binding);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ref byte reg, ref byte set, byte* binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, preg, pset, binding);
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, string reg, string set, byte* binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(reg);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(set);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, pStr0, pStr1, binding);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, byte* set, ref byte binding)
		{
			fixed (byte* pbinding = &binding)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, reg, set, pbinding);
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, byte* set, string binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(binding);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, reg, set, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ref byte reg, byte* set, ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pbinding = &binding)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, preg, set, pbinding);
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, string reg, byte* set, string binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(reg);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(binding);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, pStr0, set, pStr1);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, ref byte set, ref byte binding)
		{
			fixed (byte* pset = &set)
			{
				fixed (byte* pbinding = &binding)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, reg, pset, pbinding);
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, string set, string binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(set);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(binding);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, reg, pStr0, pStr1);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, ref byte reg, ref byte set, ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					fixed (byte* pbinding = &binding)
					{
						Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, preg, pset, pbinding);
					}
				}
			}
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, string reg, string set, string binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(reg);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(set);
			byte* pStr2 = (byte*)Marshal.StringToHGlobalAnsi(binding);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, pStr0, pStr1, pStr2);
			Marshal.FreeHGlobal((nint)pStr2);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Sets a descriptor set and binding for an HLSL register in the given stage.
		/// This method keeps a copy of the string data.
		/// </summary>
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, ShadercShaderKind shaderKind, byte* reg, byte* set, byte* binding)
		{
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStage(options, shaderKind, reg, set, binding);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ref byte reg, byte* set, byte* binding)
		{
			fixed (byte* preg = &reg)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, preg, set, binding);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, string reg, byte* set, byte* binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(reg);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, pStr0, set, binding);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, ref byte set, byte* binding)
		{
			fixed (byte* pset = &set)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, reg, pset, binding);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, string set, byte* binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(set);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, reg, pStr0, binding);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ref byte reg, ref byte set, byte* binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, preg, pset, binding);
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, string reg, string set, byte* binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(reg);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(set);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, pStr0, pStr1, binding);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, byte* set, ref byte binding)
		{
			fixed (byte* pbinding = &binding)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, reg, set, pbinding);
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, byte* set, string binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(binding);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, reg, set, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ref byte reg, byte* set, ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pbinding = &binding)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, preg, set, pbinding);
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, string reg, byte* set, string binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(reg);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(binding);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, pStr0, set, pStr1);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, ref byte set, ref byte binding)
		{
			fixed (byte* pset = &set)
			{
				fixed (byte* pbinding = &binding)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, reg, pset, pbinding);
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, string set, string binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(set);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(binding);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, reg, pStr0, pStr1);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, ref byte reg, ref byte set, ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					fixed (byte* pbinding = &binding)
					{
						Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, preg, pset, pbinding);
					}
				}
			}
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, string reg, string set, string binding)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(reg);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(set);
			byte* pStr2 = (byte*)Marshal.StringToHGlobalAnsi(binding);
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, pStr0, pStr1, pStr2);
			Marshal.FreeHGlobal((nint)pStr2);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		/// <summary>
		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
		/// but affects all shader stages.
		/// </summary>
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, byte* reg, byte* set, byte* binding)
		{
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBinding(options, reg, set, binding);
		}

		/// <summary>
		/// Sets whether the compiler should enable extension
		/// SPV_GOOGLE_hlsl_functionality1.
		/// </summary>
		public static void SetHlslFunctionality1(this ShadercCompileOptions options, bool enable)
		{
			Shaderc.ShadercCompileOptionsSetHlslFunctionality1(options, enable);
		}

		/// <summary>
		/// Sets whether 16-bit types are supported in HLSL or not.
		/// </summary>
		public static void SetHlsl16bitTypes(this ShadercCompileOptions options, bool enable)
		{
			Shaderc.ShadercCompileOptionsSetHlsl16bitTypes(options, enable);
		}

		/// <summary>
		/// Sets whether the compiler should invert position.Y output in vertex shader.
		/// </summary>
		public static void SetInvertY(this ShadercCompileOptions options, bool enable)
		{
			Shaderc.ShadercCompileOptionsSetInvertY(options, enable);
		}

		/// <summary>
		/// Sets whether the compiler generates code for max and min builtins which,
		/// if given a NaN operand, will return the other operand. Similarly, the clamp
		/// builtin will favour the non-NaN operands, as if clamp were implemented
		/// as a composition of max and min.
		/// </summary>
		public static void SetNanClamp(this ShadercCompileOptions options, bool enable)
		{
			Shaderc.ShadercCompileOptionsSetNanClamp(options, enable);
		}

		/// <summary>
		/// Releases the resources held by the result object. It is invalid to use the
		/// result object for any further operations.
		/// </summary>
		public static void ShadercResultRelease(this ShadercCompilationResult result)
		{
			Shaderc.ShadercResultRelease(result);
		}

		/// <summary>
		/// Returns the number of bytes of the compilation output data in a result
		/// object.
		/// </summary>
		public static nuint ShadercResultGetLength(this ShadercCompilationResult result)
		{
			nuint ret = Shaderc.ShadercResultGetLength(result);
			return ret;
		}

		/// <summary>
		/// Returns the number of warnings generated during the compilation.
		/// </summary>
		public static nuint ShadercResultGetNumWarnings(this ShadercCompilationResult result)
		{
			nuint ret = Shaderc.ShadercResultGetNumWarnings(result);
			return ret;
		}

		/// <summary>
		/// Returns the number of errors generated during the compilation.
		/// </summary>
		public static nuint ShadercResultGetNumErrors(this ShadercCompilationResult result)
		{
			nuint ret = Shaderc.ShadercResultGetNumErrors(result);
			return ret;
		}

		/// <summary>
		/// Returns the compilation status, indicating whether the compilation succeeded,
		/// or failed due to some reasons, like invalid shader stage or compilation
		/// errors.
		/// </summary>
		public static ShadercCompilationStatus ShadercResultGetCompilationStatus(this ShadercCompilationResult shaderc_compilation_result_t)
		{
			ShadercCompilationStatus ret = Shaderc.ShadercResultGetCompilationStatus(shaderc_compilation_result_t);
			return ret;
		}

		/// <summary>
		/// Returns a pointer to the start of the compilation output data bytes, either
		/// SPIR-V binary or char string. When the source string is compiled into SPIR-V
		/// binary, this is guaranteed to be castable to a uint32_t*. If the result
		/// contains assembly text or preprocessed source text, the pointer will point to
		/// the resulting array of characters.
		/// </summary>
		public static string ShadercResultGetBytesS(this ShadercCompilationResult result)
		{
			string ret = Marshal.PtrToStringAnsi((nint)Shaderc.ShadercResultGetBytes(result));
			return ret;
		}

		/// <summary>
		/// Returns a pointer to the start of the compilation output data bytes, either
		/// SPIR-V binary or char string. When the source string is compiled into SPIR-V
		/// binary, this is guaranteed to be castable to a uint32_t*. If the result
		/// contains assembly text or preprocessed source text, the pointer will point to
		/// the resulting array of characters.
		/// </summary>
		public static byte* ShadercResultGetBytes(this ShadercCompilationResult result)
		{
			byte* ret = Shaderc.ShadercResultGetBytes(result);
			return ret;
		}

		/// <summary>
		/// Returns a null-terminated string that contains any error messages generated
		/// during the compilation.
		/// </summary>
		public static string ShadercResultGetErrorMessageS(this ShadercCompilationResult result)
		{
			string ret = Marshal.PtrToStringAnsi((nint)Shaderc.ShadercResultGetErrorMessage(result));
			return ret;
		}

		/// <summary>
		/// Returns a null-terminated string that contains any error messages generated
		/// during the compilation.
		/// </summary>
		public static byte* ShadercResultGetErrorMessage(this ShadercCompilationResult result)
		{
			byte* ret = Shaderc.ShadercResultGetErrorMessage(result);
			return ret;
		}

	}
}
